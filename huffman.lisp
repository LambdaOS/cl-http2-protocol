; Copyright (c) 2014 Akamai Technologies, Inc. (MIT License)

(in-package :cl-http2-protocol)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defparameter *huffman-request*
    '((	 0 #*1111111111000 13 #x1ff8)
      (	 1 #*11111111111111111011000 23 #x7fffd8)
      (	 2 #*1111111111111111111111100010 28 #xfffffe2)
      (	 3 #*1111111111111111111111100011 28 #xfffffe3)
      (	 4 #*1111111111111111111111100100 28 #xfffffe4)
      (	 5 #*1111111111111111111111100101 28 #xfffffe5)
      (	 6 #*1111111111111111111111100110 28 #xfffffe6)
      (	 7 #*1111111111111111111111100111 28 #xfffffe7)
      (	 8 #*1111111111111111111111101000 28 #xfffffe8)
      (	 9 #*111111111111111111101010 24 #xffffea)
      ( 10 #*111111111111111111111111111100 30 #x3ffffffc)
      ( 11 #*1111111111111111111111101001 28 #xfffffe9)
      ( 12 #*1111111111111111111111101010 28 #xfffffea)
      ( 13 #*111111111111111111111111111101 30 #x3ffffffd)
      ( 14 #*1111111111111111111111101011 28 #xfffffeb)
      ( 15 #*1111111111111111111111101100 28 #xfffffec)
      ( 16 #*1111111111111111111111101101 28 #xfffffed)
      ( 17 #*1111111111111111111111101110 28 #xfffffee)
      ( 18 #*1111111111111111111111101111 28 #xfffffef)
      ( 19 #*1111111111111111111111110000 28 #xffffff0)
      ( 20 #*1111111111111111111111110001 28 #xffffff1)
      ( 21 #*1111111111111111111111110010 28 #xffffff2)
      ( 22 #*111111111111111111111111111110 30 #x3ffffffe)
      ( 23 #*1111111111111111111111110011 28 #xffffff3)
      ( 24 #*1111111111111111111111110100 28 #xffffff4)
      ( 25 #*1111111111111111111111110101 28 #xffffff5)
      ( 26 #*1111111111111111111111110110 28 #xffffff6)
      ( 27 #*1111111111111111111111110111 28 #xffffff7)
      ( 28 #*1111111111111111111111111000 28 #xffffff8)
      ( 29 #*1111111111111111111111111001 28 #xffffff9)
      ( 30 #*1111111111111111111111111010 28 #xffffffa)
      ( 31 #*1111111111111111111111111011 28 #xffffffb)
      ( 32 #*010100 6 #x14 #\space)
      ( 33 #*1111111000 10 #x3f8 #\!)
      ( 34 #*1111111001 10 #x3f9 10 #\")
      ( 35 #*111111111010 12 #xffa #\#)
      ( 36 #*1111111111001 13 #x1ff9 #\$)
      ( 37 #*010101 6 #x15 #\%)
      ( 38 #*11111000 8 #xf8 #\&)
      ( 39 #*11111111010 11 #x7fa #\')
      ( 40 #*1111111010 10 #x3fa #\()
      ( 41 #*1111111011 10 #x3fb #\))
      ( 42 #*11111001 8 #xf9 #\*)
      ( 43 #*11111111011 11 #x7fb #\+)
      ( 44 #*11111010 8 #xfa #\,)
      ( 45 #*010110 6 #x16 #\-)
      ( 46 #*010111 6 #x17 #\.)
      ( 47 #*011000 6 #x18 #\/)
      ( 48 #*00000 5 #x0 #\0)
      ( 49 #*00001 5 #x1 #\1)
      ( 50 #*00010 5 #x2 #\2)
      ( 51 #*011001 6 #x19 #\3)
      ( 52 #*011010 6 #x1a #\4)
      ( 53 #*011011 6 #x1b #\5)
      ( 54 #*011100 6 #x1c #\6)
      ( 55 #*011101 6 #x1d #\7)
      ( 56 #*011110 6 #x1e #\8)
      ( 57 #*011111 6 #x1f #\9)
      ( 58 #*1011100 7 #x5c #\:)
      ( 59 #*11111011 8 #xfb #\;)
      ( 60 #*111111111111100 15 #x7ffc #\<)
      ( 61 #*100000 6 #x20 #\=)
      ( 62 #*111111111011 12 #xffb #\>)
      ( 63 #*1111111100 10 #x3fc #\?)
      ( 64 #*1111111111010 13 #x1ffa #\@)
      ( 65 #*100001 6 #x21 #\A)
      ( 66 #*1011101 7 #x5d #\B)
      ( 67 #*1011110 7 #x5e #\C)
      ( 68 #*1011111 7 #x5f #\D)
      ( 69 #*1100000 7 #x60 #\E)
      ( 70 #*1100001 7 #x61 #\F)
      ( 71 #*1100010 7 #x62 #\G)
      ( 72 #*1100011 7 #x63 #\H)
      ( 73 #*1100100 7 #x64 #\I)
      ( 74 #*1100101 7 #x65 #\J)
      ( 75 #*1100110 7 #x66 #\K)
      ( 76 #*1100111 7 #x67 #\L)
      ( 77 #*1101000 7 #x68 #\M)
      ( 78 #*1101001 7 #x69 #\N)
      ( 79 #*1101010 7 #x6a #\O)
      ( 80 #*1101011 7 #x6b #\P)
      ( 81 #*1101100 7 #x6c #\Q)
      ( 82 #*1101101 7 #x6d #\R)
      ( 83 #*1101110 7 #x6e #\S)
      ( 84 #*1101111 7 #x6f #\T)
      ( 85 #*1110000 7 #x70 #\U)
      ( 86 #*1110001 7 #x71 #\V)
      ( 87 #*1110010 7 #x72 #\W)
      ( 88 #*11111100 8 #xfc #\X)
      ( 89 #*1110011 7 #x73 #\Y)
      ( 90 #*11111101 8 #xfd #\Z)
      ( 91 #*1111111111011 13 #x1ffb #\[)
      ( 92 #*1111111111111110000 19 #x7fff0 #\\)
      ( 93 #*1111111111100 13 #x1ffc #\])
      ( 94 #*11111111111100 14 #x3ffc #\^)
      ( 95 #*100010 6 #x22 #\_)
      ( 96 #*111111111111101 15 #x7ffd #\`)
      ( 97 #*00011 5 #x3 #\a)
      ( 98 #*100011 6 #x23 #\b)
      ( 99 #*00100 5 #x4 #\c)
      (100 #*100100 6 #x24 #\d)
      (101 #*00101 5 #x5 #\e)
      (102 #*100101 6 #x25 #\f)
      (103 #*100110 6 #x26 #\g)
      (104 #*100111 6 #x27 #\h)
      (105 #*00110 5 #x6 #\i)
      (106 #*1110100 7 #x74 #\j)
      (107 #*1110101 7 #x75 #\k)
      (108 #*101000 6 #x28 #\l)
      (109 #*101001 6 #x29 #\m)
      (110 #*101010 6 #x2a #\n)
      (111 #*00111 5 #x7 #\o)
      (112 #*101011 6 #x2b #\p)
      (113 #*1110110 7 #x76 #\q)
      (114 #*101100 6 #x2c #\r)
      (115 #*01000 5 #x8 #\s)
      (116 #*01001 5 #x9 #\t)
      (117 #*101101 6 #x2d #\u)
      (118 #*1110111 7 #x77 #\v)
      (119 #*1111000 7 #x78 #\w)
      (120 #*1111001 7 #x79 #\x)
      (121 #*1111010 7 #x7a #\y)
      (122 #*1111011 7 #x7b #\z)
      (123 #*111111111111110 15 #x7ffe #\{)
      (124 #*11111111100 11 #x7fc #\|)
      (125 #*11111111111101 14 #x3ffd #\})
      (126 #*1111111111101 13 #x1ffd #\~)
      (127 #*1111111111111111111111111100 28 #xffffffc)
      (128 #*11111111111111100110 20 #xfffe6)
      (129 #*1111111111111111010010 22 #x3fffd2)
      (130 #*11111111111111100111 20 #xfffe7)
      (131 #*11111111111111101000 20 #xfffe8)
      (132 #*1111111111111111010011 22 #x3fffd3)
      (133 #*1111111111111111010100 22 #x3fffd4)
      (134 #*1111111111111111010101 22 #x3fffd5)
      (135 #*11111111111111111011001 23 #x7fffd9)
      (136 #*1111111111111111010110 22 #x3fffd6)
      (137 #*11111111111111111011010 23 #x7fffda)
      (138 #*11111111111111111011011 23 #x7fffdb)
      (139 #*11111111111111111011100 23 #x7fffdc)
      (140 #*11111111111111111011101 23 #x7fffdd)
      (141 #*11111111111111111011110 23 #x7fffde)
      (142 #*111111111111111111101011 24 #xffffeb)
      (143 #*11111111111111111011111 23 #x7fffdf)
      (144 #*111111111111111111101100 24 #xffffec)
      (145 #*111111111111111111101101 24 #xffffed)
      (146 #*1111111111111111010111 22 #x3fffd7)
      (147 #*11111111111111111100000 23 #x7fffe0)
      (148 #*111111111111111111101110 24 #xffffee)
      (149 #*11111111111111111100001 23 #x7fffe1)
      (150 #*11111111111111111100010 23 #x7fffe2)
      (151 #*11111111111111111100011 23 #x7fffe3)
      (152 #*11111111111111111100100 23 #x7fffe4)
      (153 #*111111111111111011100 21 #x1fffdc)
      (154 #*1111111111111111011000 22 #x3fffd8)
      (155 #*11111111111111111100101 23 #x7fffe5)
      (156 #*1111111111111111011001 22 #x3fffd9)
      (157 #*11111111111111111100110 23 #x7fffe6)
      (158 #*11111111111111111100111 23 #x7fffe7)
      (159 #*111111111111111111101111 24 #xffffef)
      (160 #*1111111111111111011010 22 #x3fffda)
      (161 #*111111111111111011101 21 #x1fffdd)
      (162 #*11111111111111101001 20 #xfffe9)
      (163 #*1111111111111111011011 22 #x3fffdb)
      (164 #*1111111111111111011100 22 #x3fffdc)
      (165 #*11111111111111111101000 23 #x7fffe8)
      (166 #*11111111111111111101001 23 #x7fffe9)
      (167 #*111111111111111011110 21 #x1fffde)
      (168 #*11111111111111111101010 23 #x7fffea)
      (169 #*1111111111111111011101 22 #x3fffdd)
      (170 #*1111111111111111011110 22 #x3fffde)
      (171 #*111111111111111111110000 24 #xfffff0)
      (172 #*111111111111111011111 21 #x1fffdf)
      (173 #*1111111111111111011111 22 #x3fffdf)
      (174 #*11111111111111111101011 23 #x7fffeb)
      (175 #*11111111111111111101100 23 #x7fffec)
      (176 #*111111111111111100000 21 #x1fffe0)
      (177 #*111111111111111100001 21 #x1fffe1)
      (178 #*1111111111111111100000 22 #x3fffe0)
      (179 #*111111111111111100010 21 #x1fffe2)
      (180 #*11111111111111111101101 23 #x7fffed)
      (181 #*1111111111111111100001 22 #x3fffe1)
      (182 #*11111111111111111101110 23 #x7fffee)
      (183 #*11111111111111111101111 23 #x7fffef)
      (184 #*11111111111111101010 20 #xfffea)
      (185 #*1111111111111111100010 22 #x3fffe2)
      (186 #*1111111111111111100011 22 #x3fffe3)
      (187 #*1111111111111111100100 22 #x3fffe4)
      (188 #*11111111111111111110000 23 #x7ffff0)
      (189 #*1111111111111111100101 22 #x3fffe5)
      (190 #*1111111111111111100110 22 #x3fffe6)
      (191 #*11111111111111111110001 23 #x7ffff1)
      (192 #*11111111111111111111100000 26 #x3ffffe0)
      (193 #*11111111111111111111100001 26 #x3ffffe1)
      (194 #*11111111111111101011 20 #xfffeb)
      (195 #*1111111111111110001 19 #x7fff1)
      (196 #*1111111111111111100111 22 #x3fffe7)
      (197 #*11111111111111111110010 23 #x7ffff2)
      (198 #*1111111111111111101000 22 #x3fffe8)
      (199 #*1111111111111111111101100 25 #x1ffffec)
      (200 #*11111111111111111111100010 26 #x3ffffe2)
      (201 #*11111111111111111111100011 26 #x3ffffe3)
      (202 #*11111111111111111111100100 26 #x3ffffe4)
      (203 #*111111111111111111111011110 27 #x7ffffde)
      (204 #*111111111111111111111011111 27 #x7ffffdf)
      (205 #*11111111111111111111100101 26 #x3ffffe5)
      (206 #*111111111111111111110001 24 #xfffff1)
      (207 #*1111111111111111111101101 25 #x1ffffed)
      (208 #*1111111111111110010 19 #x7fff2)
      (209 #*111111111111111100011 21 #x1fffe3)
      (210 #*11111111111111111111100110 26 #x3ffffe6)
      (211 #*111111111111111111111100000 27 #x7ffffe0)
      (212 #*111111111111111111111100001 27 #x7ffffe1)
      (213 #*11111111111111111111100111 26 #x3ffffe7)
      (214 #*111111111111111111111100010 27 #x7ffffe2)
      (215 #*111111111111111111110010 24 #xfffff2)
      (216 #*111111111111111100100 21 #x1fffe4)
      (217 #*111111111111111100101 21 #x1fffe5)
      (218 #*11111111111111111111101000 26 #x3ffffe8)
      (219 #*11111111111111111111101001 26 #x3ffffe9)
      (220 #*1111111111111111111111111101 28 #xffffffd)
      (221 #*111111111111111111111100011 27 #x7ffffe3)
      (222 #*111111111111111111111100100 27 #x7ffffe4)
      (223 #*111111111111111111111100101 27 #x7ffffe5)
      (224 #*11111111111111101100 20 #xfffec)
      (225 #*111111111111111111110011 24 #xfffff3)
      (226 #*11111111111111101101 20 #xfffed)
      (227 #*111111111111111100110 21 #x1fffe6)
      (228 #*1111111111111111101001 22 #x3fffe9)
      (229 #*111111111111111100111 21 #x1fffe7)
      (230 #*111111111111111101000 21 #x1fffe8)
      (231 #*11111111111111111110011 23 #x7ffff3)
      (232 #*1111111111111111101010 22 #x3fffea)
      (233 #*1111111111111111101011 22 #x3fffeb)
      (234 #*1111111111111111111101110 25 #x1ffffee)
      (235 #*1111111111111111111101111 25 #x1ffffef)
      (236 #*111111111111111111110100 24 #xfffff4)
      (237 #*111111111111111111110101 24 #xfffff5)
      (238 #*11111111111111111111101010 26 #x3ffffea)
      (239 #*11111111111111111110100 23 #x7ffff4)
      (240 #*11111111111111111111101011 26 #x3ffffeb)
      (241 #*111111111111111111111100110 27 #x7ffffe6)
      (242 #*11111111111111111111101100 26 #x3ffffec)
      (243 #*11111111111111111111101101 26 #x3ffffed)
      (244 #*111111111111111111111100111 27 #x7ffffe7)
      (245 #*111111111111111111111101000 27 #x7ffffe8)
      (246 #*111111111111111111111101001 27 #x7ffffe9)
      (247 #*111111111111111111111101010 27 #x7ffffea)
      (248 #*111111111111111111111101011 27 #x7ffffeb)
      (249 #*1111111111111111111111111110 28 #xffffffe)
      (250 #*111111111111111111111101100 27 #x7ffffec)
      (251 #*111111111111111111111101101 27 #x7ffffed)
      (252 #*111111111111111111111101110 27 #x7ffffee)
      (253 #*111111111111111111111101111 27 #x7ffffef)
      (254 #*111111111111111111111110000 27 #x7fffff0)
      (255 #*11111111111111111111101110 26 #x3ffffee)
      (256 #*111111111111111111111111111111 30 #x3fffffff :eos))))

(define-compiler-macro huff-char-code (entry) `(first  ,entry))
(define-compiler-macro huff-bitv      (entry) `(second ,entry))
(define-compiler-macro huff-nbits     (entry) `(third  ,entry))
(define-compiler-macro huff-value     (entry) `(fourth ,entry))

(defun byte-vector-to-bit-vector (bytes length)
  "Create a) vector of type BIT from a vector of type (UNSIGNED-BYTE 8)."
  ; seems like there should be implementation-specific fast ways of doing this...
  (loop
     with data = (make-array (* length 8) :element-type 'bit)
     for c across bytes
     repeat length
     for i from 0 by 8
     do (loop
	   for b downfrom 7 to 0
	   for j upfrom i
	   do (setf (bit data j) (ldb (byte 1 b) c)))
     finally (return data)))

;; this is not a particularly fast implementation

(defun huffman-decode (array input-length)
  "Huffman decode by multiple passes on the huffman table."
  (declare (fixnum input-length))
  (loop
     with bit-input-length = (* input-length 8)
     with bits = (byte-vector-to-bit-vector array input-length)
     with data = (make-array (* input-length 3) :element-type '(unsigned-byte 8) :fill-pointer 0)
     with bp = 0
     while (<= bp bit-input-length)
     for c = (loop
		for n from 4 to 27
		for bpn from (+ bp 4) to (+ bp 27)
		while (<= bpn bit-input-length)
		for d = (find-if (lambda (h)
				   (and (= n (huff-nbits h))
					(not (mismatch (huff-bitv h) bits :start2 bp :end2 bpn))))
				 *huffman-request*)
		if d do (progn
			  (incf bp n)
			  (return (huff-char-code d))))
     if c
     do (vector-push-extend c data)
     else
     do (loop-finish)
     finally (progn
					; (format t "(huffman-decode): returning ~S~%" (map 'string #'code-char data))
	       (return (values data (- bit-input-length bp))))))

(defun huffman-decode-buffer-to-string (buffer input-length)
  (babel:octets-to-string (huffman-decode (buffer-data buffer) input-length)))

;; following is code to setup a faster implementation but it makes sbcl crash sometimes

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun huffman-tree (hlist &optional (n 0))
    (macrolet ((huff-filter ((var list) form) `(remove-if-not (lambda (,var) ,form) ,list)))
      (if (> n 27)
	  nil
	  (let ((hlist* (huff-filter (h hlist) (> (huff-nbits h) n))))
	    (if (null hlist*)
		(car hlist)
		(list (huffman-tree (huff-filter (h hlist*) (= (aref (huff-bitv h) n) 0)) (1+ n))
		      (huffman-tree (huff-filter (h hlist*) (= (aref (huff-bitv h) n) 1)) (1+ n))))))))

  (defun tree-to-code (tree)
    (if (integerp (first tree))
	`(yield-byte ,(first tree))
	`(if (next-bit-zero)
	     ,(tree-to-code (first tree))
	     ,(tree-to-code (second tree))))))

(defmacro def-huffman-decode (hlist)
  (let ((hcode (tree-to-code (huffman-tree (eval hlist)))))
    `(defun huffman-decode (array input-length)
       (loop
	  with bit-input-length = (* input-length 8)
	  with bits = (byte-vector-to-bit-vector array input-length)
	  with data = (make-array (* input-length 3) :element-type '(unsigned-byte 8) :fill-pointer 0)
	  with bp = 0
	  with dp = 0
	  while (< bp bit-input-length)
	  do (macrolet ((next-bit-zero () `(prog1 (zerop (aref bits bp)) (incf bp)))
			(yield-byte (c) (if (< c 256) `(progn (setf (aref data dp) ,c) (incf dp)) `(loop-finish))))
	       ,hcode)
	  finally (progn
		    (setf (fill-pointer data) dp)
		    (return (values data (- bit-input-length bp))))))))

; sometimes this causes a stack overflow or some such:
;(def-huffman-decode *huffman-request*)

(defun test-huffman-decode-1 ()
  (let ((input #(90 139 52 33 152 99 204 35 38 97 130 7 212 219 111 226 229 230 23 211
		 106 125 219 114 121 226 250 155 108 210 4 129))
	(input-size 32)
	(output #(101 99 50 45 53 48 45 49 55 45 49 49 56 45 49 52 52 46 99 111 109 112
		  117 116 101 45 49 46 97 109 97 122 111 110 97 119 115 46 99 111 109 58
		  56 48 56 48))
	(output-leftover 1))
    (multiple-value-bind (test-output test-output-leftover)
	(huffman-decode input input-size)
      (and (not (mismatch output test-output)) (= output-leftover test-output-leftover)))))

(defun test-huffman-decode-2 ()
  (let ((input #(214 223 118 89 98 79 11 224 111 235 90 84 203 156 220 107 236 55 133
		 206 93 134 214 149 27 199 105 189 12 32 252 189 134 195 148 200 39 195
		 226 109 75 87 179 78 64 32 2 2 109 44 193 124 27 208 232 39 195))
	(input-size 57)
	(output #(77 111 122 105 108 108 97 47 53 46 48 32 40 77 97 99 105 110 116 111
		  115 104 59 32 73 110 116 101 108 32 77 97 99 32 79 83 32 88 32 49 48
		  46 57 59 32 114 118 58 51 50 46 48 41 32 71 101 99 107 111 47 50 48 49
		  48 48 49 48 49 32 70 105 114 101 102 111 120 47 51 50 46 48))
	(output-leftover 2))
    (multiple-value-bind (test-output test-output-leftover)
	(huffman-decode input input-size)
      (and (not (mismatch output test-output)) (= output-leftover test-output-leftover)))))
