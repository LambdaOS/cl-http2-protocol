; Copyright (c) 2014 Akamai Technologies, Inc. (MIT License)

(in-package :cl-http2-protocol)

(defparameter *huffman-request*
  '((  0 #*111111111111111111110111010 27 #x7ffffba)
    (  1 #*111111111111111111110111011 27 #x7ffffbb)
    (  2 #*111111111111111111110111100 27 #x7ffffbc)
    (  3 #*111111111111111111110111101 27 #x7ffffbd)
    (  4 #*111111111111111111110111110 27 #x7ffffbe)
    (  5 #*111111111111111111110111111 27 #x7ffffbf)
    (  6 #*111111111111111111111000000 27 #x7ffffc0)
    (  7 #*111111111111111111111000001 27 #x7ffffc1)
    (  8 #*111111111111111111111000010 27 #x7ffffc2)
    (  9 #*111111111111111111111000011 27 #x7ffffc3)
    ( 10 #*111111111111111111111000100 27 #x7ffffc4)
    ( 11 #*111111111111111111111000101 27 #x7ffffc5)
    ( 12 #*111111111111111111111000110 27 #x7ffffc6)
    ( 13 #*111111111111111111111000111 27 #x7ffffc7)
    ( 14 #*111111111111111111111001000 27 #x7ffffc8)
    ( 15 #*111111111111111111111001001 27 #x7ffffc9)
    ( 16 #*111111111111111111111001010 27 #x7ffffca)
    ( 17 #*111111111111111111111001011 27 #x7ffffcb)
    ( 18 #*111111111111111111111001100 27 #x7ffffcc)
    ( 19 #*111111111111111111111001101 27 #x7ffffcd)
    ( 20 #*111111111111111111111001110 27 #x7ffffce)
    ( 21 #*111111111111111111111001111 27 #x7ffffcf)
    ( 22 #*111111111111111111111010000 27 #x7ffffd0)
    ( 23 #*111111111111111111111010001 27 #x7ffffd1)
    ( 24 #*111111111111111111111010010 27 #x7ffffd2)
    ( 25 #*111111111111111111111010011 27 #x7ffffd3)
    ( 26 #*111111111111111111111010100 27 #x7ffffd4)
    ( 27 #*111111111111111111111010101 27 #x7ffffd5)
    ( 28 #*111111111111111111111010110 27 #x7ffffd6)
    ( 29 #*111111111111111111111010111 27 #x7ffffd7)
    ( 30 #*111111111111111111111011000 27 #x7ffffd8)
    ( 31 #*111111111111111111111011001 27 #x7ffffd9)
    ( 32 #*11101000 8 #xe8 #\Space)
    ( 33 #*111111111100 12 #xffc #\!)
    ( 34 #*11111111111010 14 #x3ffa #\")
    ( 35 #*111111111111100 15 #x7ffc #\#)
    ( 36 #*111111111111101 15 #x7ffd #\$)
    ( 37 #*100100 6 #x24 #\%)
    ( 38 #*1101110 7 #x6e #\&)
    ( 39 #*111111111111110 15 #x7ffe #\')
    ( 40 #*11111111010 11 #x7fa #\()
    ( 41 #*11111111011 11 #x7fb #\))
    ( 42 #*1111111010 10 #x3fa #\*)
    ( 43 #*11111111100 11 #x7fc #\+)
    ( 44 #*11101001 8 #xe9 #\,)
    ( 45 #*100101 6 #x25 #\-)
    ( 46 #*00100 5 #x4 #\.)
    ( 47 #*0000 4 #x0 #\/)
    ( 48 #*00101 5 #x5 #\0)
    ( 49 #*00110 5 #x6 #\1)
    ( 50 #*00111 5 #x7 #\2)
    ( 51 #*100110 6 #x26 #\3)
    ( 52 #*100111 6 #x27 #\4)
    ( 53 #*101000 6 #x28 #\5)
    ( 54 #*101001 6 #x29 #\6)
    ( 55 #*101010 6 #x2a #\7)
    ( 56 #*101011 6 #x2b #\8)
    ( 57 #*101100 6 #x2c #\9)
    ( 58 #*111101100 9 #x1ec #\:)
    ( 59 #*11101010 8 #xea #\;)
    ( 60 #*111111111111111110 18 #x3fffe #\<)
    ( 61 #*101101 6 #x2d #\=)
    ( 62 #*11111111111111100 17 #x1fffc #\?)
    ( 63 #*111101101 9 #x1ed #\?)
    ( 64 #*11111111111011 14 #x3ffb #\@)
    ( 65 #*1101111 7 #x6f #\A)
    ( 66 #*11101011 8 #xeb #\B)
    ( 67 #*11101100 8 #xec #\C)
    ( 68 #*11101101 8 #xed #\D)
    ( 69 #*11101110 8 #xee #\E)
    ( 70 #*1110000 7 #x70 #\F)
    ( 71 #*111101110 9 #x1ee #\G)
    ( 72 #*111101111 9 #x1ef #\H)
    ( 73 #*111110000 9 #x1f0 #\I)
    ( 74 #*111110001 9 #x1f1 #\J)
    ( 75 #*1111111011 10 #x3fb #\K)
    ( 76 #*111110010 9 #x1f2 #\L)
    ( 77 #*11101111 8 #xef #\M)
    ( 78 #*111110011 9 #x1f3 #\N)
    ( 79 #*111110100 9 #x1f4 #\O)
    ( 80 #*111110101 9 #x1f5 #\P)
    ( 81 #*111110110 9 #x1f6 #\Q)
    ( 82 #*111110111 9 #x1f7 #\R)
    ( 83 #*11110000 8 #xf0 #\S)
    ( 84 #*11110001 8 #xf1 #\T)
    ( 85 #*111111000 9 #x1f8 #\U)
    ( 86 #*111111001 9 #x1f9 #\V)
    ( 87 #*111111010 9 #x1fa #\W)
    ( 88 #*111111011 9 #x1fb #\X)
    ( 89 #*111111100 9 #x1fc #\Y)
    ( 90 #*1111111100 10 #x3fc #\Z)
    ( 91 #*11111111111100 14 #x3ffc #\[)
    ( 92 #*111111111111111111111011010 27 #x7ffffda #\\)
    ( 93 #*1111111111100 13 #x1ffc #\])
    ( 94 #*11111111111101 14 #x3ffd #\^)
    ( 95 #*101110 6 #x2e #\_)
    ( 96 #*1111111111111111110 19 #x7fffe #\`)
    ( 97 #*01000 5 #x8 #\a)
    ( 98 #*101111 6 #x2f #\b)
    ( 99 #*01001 5 #x9 #\c)
    (100 #*110000 6 #x30 #\d)
    (101 #*0001 4 #x1 #\e)
    (102 #*110001 6 #x31 #\f)
    (103 #*110010 6 #x32 #\g)
    (104 #*110011 6 #x33 #\h)
    (105 #*01010 5 #xa #\i)
    (106 #*1110001 7 #x71 #\j)
    (107 #*1110010 7 #x72 #\k)
    (108 #*01011 5 #xb #\l)
    (109 #*110100 6 #x34 #\m)
    (110 #*01100 5 #xc #\n)
    (111 #*01101 5 #xd #\o)
    (112 #*01110 5 #xe #\p)
    (113 #*11110010 8 #xf2 #\q)
    (114 #*01111 5 #xf #\r)
    (115 #*10000 5 #x10 #\s)
    (116 #*10001 5 #x11 #\t)
    (117 #*110101 6 #x35 #\u)
    (118 #*1110011 7 #x73 #\v)
    (119 #*110110 6 #x36 #\w)
    (120 #*11110011 8 #xf3 #\x)
    (121 #*11110100 8 #xf4 #\y)
    (122 #*11110101 8 #xf5 #\z)
    (123 #*11111111111111101 17 #x1fffd #\{)
    (124 #*11111111101 11 #x7fd #\|)
    (125 #*11111111111111110 17 #x1fffe #\})
    (126 #*111111111101 12 #xffd #\~)
    (127 #*111111111111111111111011011 27 #x7ffffdb)
    (128 #*111111111111111111111011100 27 #x7ffffdc)
    (129 #*111111111111111111111011101 27 #x7ffffdd)
    (130 #*111111111111111111111011110 27 #x7ffffde)
    (131 #*111111111111111111111011111 27 #x7ffffdf)
    (132 #*111111111111111111111100000 27 #x7ffffe0)
    (133 #*111111111111111111111100001 27 #x7ffffe1)
    (134 #*111111111111111111111100010 27 #x7ffffe2)
    (135 #*111111111111111111111100011 27 #x7ffffe3)
    (136 #*111111111111111111111100100 27 #x7ffffe4)
    (137 #*111111111111111111111100101 27 #x7ffffe5)
    (138 #*111111111111111111111100110 27 #x7ffffe6)
    (139 #*111111111111111111111100111 27 #x7ffffe7)
    (140 #*111111111111111111111101000 27 #x7ffffe8)
    (141 #*111111111111111111111101001 27 #x7ffffe9)
    (142 #*111111111111111111111101010 27 #x7ffffea)
    (143 #*111111111111111111111101011 27 #x7ffffeb)
    (144 #*111111111111111111111101100 27 #x7ffffec)
    (145 #*111111111111111111111101101 27 #x7ffffed)
    (146 #*111111111111111111111101110 27 #x7ffffee)
    (147 #*111111111111111111111101111 27 #x7ffffef)
    (148 #*111111111111111111111110000 27 #x7fffff0)
    (149 #*111111111111111111111110001 27 #x7fffff1)
    (150 #*111111111111111111111110010 27 #x7fffff2)
    (151 #*111111111111111111111110011 27 #x7fffff3)
    (152 #*111111111111111111111110100 27 #x7fffff4)
    (153 #*111111111111111111111110101 27 #x7fffff5)
    (154 #*111111111111111111111110110 27 #x7fffff6)
    (155 #*111111111111111111111110111 27 #x7fffff7)
    (156 #*111111111111111111111111000 27 #x7fffff8)
    (157 #*111111111111111111111111001 27 #x7fffff9)
    (158 #*111111111111111111111111010 27 #x7fffffa)
    (159 #*111111111111111111111111011 27 #x7fffffb)
    (160 #*111111111111111111111111100 27 #x7fffffc)
    (161 #*111111111111111111111111101 27 #x7fffffd)
    (162 #*111111111111111111111111110 27 #x7fffffe)
    (163 #*111111111111111111111111111 27 #x7ffffff)
    (164 #*11111111111111111110000000 26 #x3ffff80)
    (165 #*11111111111111111110000001 26 #x3ffff81)
    (166 #*11111111111111111110000010 26 #x3ffff82)
    (167 #*11111111111111111110000011 26 #x3ffff83)
    (168 #*11111111111111111110000100 26 #x3ffff84)
    (169 #*11111111111111111110000101 26 #x3ffff85)
    (170 #*11111111111111111110000110 26 #x3ffff86)
    (171 #*11111111111111111110000111 26 #x3ffff87)
    (172 #*11111111111111111110001000 26 #x3ffff88)
    (173 #*11111111111111111110001001 26 #x3ffff89)
    (174 #*11111111111111111110001010 26 #x3ffff8a)
    (175 #*11111111111111111110001011 26 #x3ffff8b)
    (176 #*11111111111111111110001100 26 #x3ffff8c)
    (177 #*11111111111111111110001101 26 #x3ffff8d)
    (178 #*11111111111111111110001110 26 #x3ffff8e)
    (179 #*11111111111111111110001111 26 #x3ffff8f)
    (180 #*11111111111111111110010000 26 #x3ffff90)
    (181 #*11111111111111111110010001 26 #x3ffff91)
    (182 #*11111111111111111110010010 26 #x3ffff92)
    (183 #*11111111111111111110010011 26 #x3ffff93)
    (184 #*11111111111111111110010100 26 #x3ffff94)
    (185 #*11111111111111111110010101 26 #x3ffff95)
    (186 #*11111111111111111110010110 26 #x3ffff96)
    (187 #*11111111111111111110010111 26 #x3ffff97)
    (188 #*11111111111111111110011000 26 #x3ffff98)
    (189 #*11111111111111111110011001 26 #x3ffff99)
    (190 #*11111111111111111110011010 26 #x3ffff9a)
    (191 #*11111111111111111110011011 26 #x3ffff9b)
    (192 #*11111111111111111110011100 26 #x3ffff9c)
    (193 #*11111111111111111110011101 26 #x3ffff9d)
    (194 #*11111111111111111110011110 26 #x3ffff9e)
    (195 #*11111111111111111110011111 26 #x3ffff9f)
    (196 #*11111111111111111110100000 26 #x3ffffa0)
    (197 #*11111111111111111110100001 26 #x3ffffa1)
    (198 #*11111111111111111110100010 26 #x3ffffa2)
    (199 #*11111111111111111110100011 26 #x3ffffa3)
    (200 #*11111111111111111110100100 26 #x3ffffa4)
    (201 #*11111111111111111110100101 26 #x3ffffa5)
    (202 #*11111111111111111110100110 26 #x3ffffa6)
    (203 #*11111111111111111110100111 26 #x3ffffa7)
    (204 #*11111111111111111110101000 26 #x3ffffa8)
    (205 #*11111111111111111110101001 26 #x3ffffa9)
    (206 #*11111111111111111110101010 26 #x3ffffaa)
    (207 #*11111111111111111110101011 26 #x3ffffab)
    (208 #*11111111111111111110101100 26 #x3ffffac)
    (209 #*11111111111111111110101101 26 #x3ffffad)
    (210 #*11111111111111111110101110 26 #x3ffffae)
    (211 #*11111111111111111110101111 26 #x3ffffaf)
    (212 #*11111111111111111110110000 26 #x3ffffb0)
    (213 #*11111111111111111110110001 26 #x3ffffb1)
    (214 #*11111111111111111110110010 26 #x3ffffb2)
    (215 #*11111111111111111110110011 26 #x3ffffb3)
    (216 #*11111111111111111110110100 26 #x3ffffb4)
    (217 #*11111111111111111110110101 26 #x3ffffb5)
    (218 #*11111111111111111110110110 26 #x3ffffb6)
    (219 #*11111111111111111110110111 26 #x3ffffb7)
    (220 #*11111111111111111110111000 26 #x3ffffb8)
    (221 #*11111111111111111110111001 26 #x3ffffb9)
    (222 #*11111111111111111110111010 26 #x3ffffba)
    (223 #*11111111111111111110111011 26 #x3ffffbb)
    (224 #*11111111111111111110111100 26 #x3ffffbc)
    (225 #*11111111111111111110111101 26 #x3ffffbd)
    (226 #*11111111111111111110111110 26 #x3ffffbe)
    (227 #*11111111111111111110111111 26 #x3ffffbf)
    (228 #*11111111111111111111000000 26 #x3ffffc0)
    (229 #*11111111111111111111000001 26 #x3ffffc1)
    (230 #*11111111111111111111000010 26 #x3ffffc2)
    (231 #*11111111111111111111000011 26 #x3ffffc3)
    (232 #*11111111111111111111000100 26 #x3ffffc4)
    (233 #*11111111111111111111000101 26 #x3ffffc5)
    (234 #*11111111111111111111000110 26 #x3ffffc6)
    (235 #*11111111111111111111000111 26 #x3ffffc7)
    (236 #*11111111111111111111001000 26 #x3ffffc8)
    (237 #*11111111111111111111001001 26 #x3ffffc9)
    (238 #*11111111111111111111001010 26 #x3ffffca)
    (239 #*11111111111111111111001011 26 #x3ffffcb)
    (240 #*11111111111111111111001100 26 #x3ffffcc)
    (241 #*11111111111111111111001101 26 #x3ffffcd)
    (242 #*11111111111111111111001110 26 #x3ffffce)
    (243 #*11111111111111111111001111 26 #x3ffffcf)
    (244 #*11111111111111111111010000 26 #x3ffffd0)
    (245 #*11111111111111111111010001 26 #x3ffffd1)
    (246 #*11111111111111111111010010 26 #x3ffffd2)
    (247 #*11111111111111111111010011 26 #x3ffffd3)
    (248 #*11111111111111111111010100 26 #x3ffffd4)
    (249 #*11111111111111111111010101 26 #x3ffffd5)
    (250 #*11111111111111111111010110 26 #x3ffffd6)
    (251 #*11111111111111111111010111 26 #x3ffffd7)
    (252 #*11111111111111111111011000 26 #x3ffffd8)
    (253 #*11111111111111111111011001 26 #x3ffffd9)
    (254 #*11111111111111111111011010 26 #x3ffffda)
    (255 #*11111111111111111111011011 26 #x3ffffdb)
    (256 #*11111111111111111111011100 26 #x3ffffdc :eos)))

(defun byte-vector-to-bit-vector (bytes length)
  "Create a vector of type BIT from a vector of type (UNSIGNED-BYTE 8)."
  ; seems like there should be implementation-specific fast ways of doing this...
  (loop
     with data = (make-array (* length 8) :element-type 'bit)
     for c across bytes
     repeat length
     for i from 0 by 8
     do (loop
	   for b downfrom 7 to 0
	   for j = i then (1+ j)
	   do (setf (bit data j) (ldb (byte 1 b) c)))
     finally (return data)))

(defun huffman-decode (array input-length)
  "Huffman decode by multiple passes on the huffman table."
  (declare (fixnum input-length))
  (loop
     with bit-input-length = (* input-length 8)
     with bits = (byte-vector-to-bit-vector array input-length)
     with data = (make-array (* input-length 3) :element-type '(unsigned-byte 8) :fill-pointer 0)
     with bp = 0
     while (<= bp bit-input-length)
     for c = (loop
		for n from 4 to 27
		for bpn from (+ bp 4) to (+ bp 27)
		while (<= bpn bit-input-length)
		for d = (find-if (lambda (h)
				   (and (= n (third h))
					(not (mismatch (second h) bits :start2 bp :end2 bpn))))
				 *huffman-request*)
		if d do (progn
			  (incf bp n)
			  (return (first d))))
     if c
     do (vector-push-extend c data)
     else
     do (loop-finish)
     finally (return (values data (- bit-input-length bp)))))

(defun huffman-decode-buffer-to-string (buffer input-length)
  (babel:octets-to-string (huffman-decode (buffer-data buffer) input-length)))

#|
(defun huffman-tree (hlist n)
  (if (> n 27)
      nil
      (let ((hlist* (remove-if-not (lambda (h) (< n (third h))) hlist)))
	(if (null hlist*)
	    (car hlist)
	    (list (huffman-tree (remove-if-not (lambda (h) (= (aref (second h) n) 0)) hlist*) (1+ n))
		  (huffman-tree (remove-if-not (lambda (h) (= (aref (second h) n) 1)) hlist*) (1+ n)))))))

(defun tree-to-code (tree)
  (if (integerp (first tree))
      `(yield-byte ,(first tree))
      `(if (next-bit-zero)
	   ,(tree-to-code (first tree))
	   ,(tree-to-code (second tree)))))

(defmacro huffman-decode-maker ()
  `(defun huffman-decode (array length)
     (loop
	with bits = (byte-vector-to-bit-vector array length)
	with data = (make-array length :element-type '(unsigned-byte 8))
	with bp = -1
	with dp = -1
	while (< dp (* length 8))
	do (macrolet ((next-bit-zero () `(zerop (aref bits (incf bp))))
		      (yield-byte (c) (if (< c 256) `(setf (aref data (incf dp)) ,c) `(return))))
	     ,(tree-to-code (huffman-tree *huffman-request* 0))))))

; causes stack overflow or some such
(huffman-decode-maker)
|#
