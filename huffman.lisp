; Copyright (c) 2014 Akamai Technologies, Inc. (MIT License)

(in-package :cl-http2-protocol)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defparameter *huffman-request*
    '((  0 #*11111111111111111110111010 26 #x3ffffba)
      (  1 #*11111111111111111110111011 26 #x3ffffbb)
      (  2 #*11111111111111111110111100 26 #x3ffffbc)
      (  3 #*11111111111111111110111101 26 #x3ffffbd)
      (  4 #*11111111111111111110111110 26 #x3ffffbe)
      (  5 #*11111111111111111110111111 26 #x3ffffbf)
      (  6 #*11111111111111111111000000 26 #x3ffffc0)
      (  7 #*11111111111111111111000001 26 #x3ffffc1)
      (  8 #*11111111111111111111000010 26 #x3ffffc2)
      (  9 #*11111111111111111111000011 26 #x3ffffc3)
      ( 10 #*11111111111111111111000100 26 #x3ffffc4)
      ( 11 #*11111111111111111111000101 26 #x3ffffc5)
      ( 12 #*11111111111111111111000110 26 #x3ffffc6)
      ( 13 #*11111111111111111111000111 26 #x3ffffc7)
      ( 14 #*11111111111111111111001000 26 #x3ffffc8)
      ( 15 #*11111111111111111111001001 26 #x3ffffc9)
      ( 16 #*11111111111111111111001010 26 #x3ffffca)
      ( 17 #*11111111111111111111001011 26 #x3ffffcb)
      ( 18 #*11111111111111111111001100 26 #x3ffffcc)
      ( 19 #*11111111111111111111001101 26 #x3ffffcd)
      ( 20 #*11111111111111111111001110 26 #x3ffffce)
      ( 21 #*11111111111111111111001111 26 #x3ffffcf)
      ( 22 #*11111111111111111111010000 26 #x3ffffd0)
      ( 23 #*11111111111111111111010001 26 #x3ffffd1)
      ( 24 #*11111111111111111111010010 26 #x3ffffd2)
      ( 25 #*11111111111111111111010011 26 #x3ffffd3)
      ( 26 #*11111111111111111111010100 26 #x3ffffd4)
      ( 27 #*11111111111111111111010101 26 #x3ffffd5)
      ( 28 #*11111111111111111111010110 26 #x3ffffd6)
      ( 29 #*11111111111111111111010111 26 #x3ffffd7)
      ( 30 #*11111111111111111111011000 26 #x3ffffd8)
      ( 31 #*11111111111111111111011001 26 #x3ffffd9)
      ( 32 #*00110 5 #x6 #\space)
      ( 33 #*1111111111100 13 #x1ffc #\!)
      ( 34 #*111110000 9 #x1f0 #\")
      ( 35 #*11111111111100 14 #x3ffc #\#)
      ( 36 #*111111111111100 15 #x7ffc #\$)
      ( 37 #*011110 6 #x1e #\%)
      ( 38 #*1100100 7 #x64 #\&)
      ( 39 #*1111111111101 13 #x1ffd #\')
      ( 40 #*1111111010 10 #x3fa #\()
      ( 41 #*111110001 9 #x1f1 #\))
      ( 42 #*1111111011 10 #x3fb #\*)
      ( 43 #*1111111100 10 #x3fc #\+)
      ( 44 #*1100101 7 #x65 #\,)
      ( 45 #*1100110 7 #x66 #\-)
      ( 46 #*011111 6 #x1f #\.)
      ( 47 #*00111 5 #x7 #\/)
      ( 48 #*0000 4 #x0 #\0)
      ( 49 #*0001 4 #x1 #\1)
      ( 50 #*0010 4 #x2 #\2)
      ( 51 #*01000 5 #x8 #\3)
      ( 52 #*100000 6 #x20 #\4)
      ( 53 #*100001 6 #x21 #\5)
      ( 54 #*100010 6 #x22 #\6)
      ( 55 #*100011 6 #x23 #\7)
      ( 56 #*100100 6 #x24 #\8)
      ( 57 #*100101 6 #x25 #\9)
      ( 58 #*100110 6 #x26 #\:)
      ( 59 #*11101100 8 #xec #\;)
      ( 60 #*11111111111111100 17 #x1fffc #\<)
      ( 61 #*100111 6 #x27 #\=)
      ( 62 #*111111111111101 15 #x7ffd #\>)
      ( 63 #*1111111101 10 #x3fd #\?)
      ( 64 #*111111111111110 15 #x7ffe #\@)
      ( 65 #*1100111 7 #x67 #\A)
      ( 66 #*11101101 8 #xed #\B)
      ( 67 #*11101110 8 #xee #\C)
      ( 68 #*1101000 7 #x68 #\D)
      ( 69 #*11101111 8 #xef #\E)
      ( 70 #*1101001 7 #x69 #\F)
      ( 71 #*1101010 7 #x6a #\G)
      ( 72 #*111110010 9 #x1f2 #\H)
      ( 73 #*11110000 8 #xf0 #\I)
      ( 74 #*111110011 9 #x1f3 #\J)
      ( 75 #*111110100 9 #x1f4 #\K)
      ( 76 #*111110101 9 #x1f5 #\L)
      ( 77 #*1101011 7 #x6b #\M)
      ( 78 #*1101100 7 #x6c #\N)
      ( 79 #*11110001 8 #xf1 #\O)
      ( 80 #*11110010 8 #xf2 #\P)
      ( 81 #*111110110 9 #x1f6 #\Q)
      ( 82 #*111110111 9 #x1f7 #\R)
      ( 83 #*1101101 7 #x6d #\S)
      ( 84 #*101000 6 #x28 #\T)
      ( 85 #*11110011 8 #xf3 #\U)
      ( 86 #*111111000 9 #x1f8 #\V)
      ( 87 #*111111001 9 #x1f9 #\W)
      ( 88 #*11110100 8 #xf4 #\X)
      ( 89 #*111111010 9 #x1fa #\Y)
      ( 90 #*111111011 9 #x1fb #\Z)
      ( 91 #*11111111100 11 #x7fc #\[)
      ( 92 #*11111111111111111111011010 26 #x3ffffda #\\)
      ( 93 #*11111111101 11 #x7fd #\])
      ( 94 #*11111111111101 14 #x3ffd #\^)
      ( 95 #*1101110 7 #x6e #\_)
      ( 96 #*111111111111111110 18 #x3fffe #\`)
      ( 97 #*01001 5 #x9 #\a)
      ( 98 #*1101111 7 #x6f #\b)
      ( 99 #*01010 5 #xa #\c)
      (100 #*101001 6 #x29 #\d)
      (101 #*01011 5 #xb #\e)
      (102 #*1110000 7 #x70 #\f)
      (103 #*101010 6 #x2a #\g)
      (104 #*101011 6 #x2b #\h)
      (105 #*01100 5 #xc #\i)
      (106 #*11110101 8 #xf5 #\j)
      (107 #*11110110 8 #xf6 #\k)
      (108 #*101100 6 #x2cd  #\l)
      (109 #*101101 6 #x2d #\m)
      (110 #*101110 6 #x2e #\n)
      (111 #*01101 5 #xd #\o)
      (112 #*101111 6 #x2f #\p)
      (113 #*111111100 9 #x1fc #\q)
      (114 #*110000 6 #x30 #\r)
      (115 #*110001 6 #x31 #\s)
      (116 #*01110 5 #xe #\t)
      (117 #*1110001 7 #x71 #\u)
      (118 #*1110010 7 #x72 #\v)
      (119 #*1110011 7 #x73 #\w)
      (120 #*1110100 7 #x74 #\x)
      (121 #*1110101 7 #x75 #\y)
      (122 #*11110111 8 #xf7 #\z)
      (123 #*11111111111111101 17 #x1fffd #\{)
      (124 #*111111111100 12 #xffc #\')
      (125 #*11111111111111110 17 #x1fffe #\})
      (126 #*111111111101 12 #xffd #\~)
      (127 #*11111111111111111111011011 26 #x3ffffdb)
      (128 #*11111111111111111111011100 26 #x3ffffdc)
      (129 #*11111111111111111111011101 26 #x3ffffdd)
      (130 #*11111111111111111111011110 26 #x3ffffde)
      (131 #*11111111111111111111011111 26 #x3ffffdf)
      (132 #*11111111111111111111100000 26 #x3ffffe0)
      (133 #*11111111111111111111100001 26 #x3ffffe1)
      (134 #*11111111111111111111100010 26 #x3ffffe2)
      (135 #*11111111111111111111100011 26 #x3ffffe3)
      (136 #*11111111111111111111100100 26 #x3ffffe4)
      (137 #*11111111111111111111100101 26 #x3ffffe5)
      (138 #*11111111111111111111100110 26 #x3ffffe6)
      (139 #*11111111111111111111100111 26 #x3ffffe7)
      (140 #*11111111111111111111101000 26 #x3ffffe8)
      (141 #*11111111111111111111101001 26 #x3ffffe9)
      (142 #*11111111111111111111101010 26 #x3ffffea)
      (143 #*11111111111111111111101011 26 #x3ffffeb)
      (144 #*11111111111111111111101100 26 #x3ffffec)
      (145 #*11111111111111111111101101 26 #x3ffffed)
      (146 #*11111111111111111111101110 26 #x3ffffee)
      (147 #*11111111111111111111101111 26 #x3ffffef)
      (148 #*11111111111111111111110000 26 #x3fffff0)
      (149 #*11111111111111111111110001 26 #x3fffff1)
      (150 #*11111111111111111111110010 26 #x3fffff2)
      (151 #*11111111111111111111110011 26 #x3fffff3)
      (152 #*11111111111111111111110100 26 #x3fffff4)
      (153 #*11111111111111111111110101 26 #x3fffff5)
      (154 #*11111111111111111111110110 26 #x3fffff6)
      (155 #*11111111111111111111110111 26 #x3fffff7)
      (156 #*11111111111111111111111000 26 #x3fffff8)
      (157 #*11111111111111111111111001 26 #x3fffff9)
      (158 #*11111111111111111111111010 26 #x3fffffa)
      (159 #*11111111111111111111111011 26 #x3fffffb)
      (160 #*11111111111111111111111100 26 #x3fffffc)
      (161 #*11111111111111111111111101 26 #x3fffffd)
      (162 #*11111111111111111111111110 26 #x3fffffe)
      (163 #*11111111111111111111111111 26 #x3ffffff)
      (164 #*1111111111111111110000000 25 #x1ffff80)
      (165 #*1111111111111111110000001 25 #x1ffff81)
      (166 #*1111111111111111110000010 25 #x1ffff82)
      (167 #*1111111111111111110000011 25 #x1ffff83)
      (168 #*1111111111111111110000100 25 #x1ffff84)
      (169 #*1111111111111111110000101 25 #x1ffff85)
      (170 #*1111111111111111110000110 25 #x1ffff86)
      (171 #*1111111111111111110000111 25 #x1ffff87)
      (172 #*1111111111111111110001000 25 #x1ffff88)
      (173 #*1111111111111111110001001 25 #x1ffff89)
      (174 #*1111111111111111110001010 25 #x1ffff8a)
      (175 #*1111111111111111110001011 25 #x1ffff8b)
      (176 #*1111111111111111110001100 25 #x1ffff8c)
      (177 #*1111111111111111110001101 25 #x1ffff8d)
      (178 #*1111111111111111110001110 25 #x1ffff8e)
      (179 #*1111111111111111110001111 25 #x1ffff8f)
      (180 #*1111111111111111110010000 25 #x1ffff90)
      (181 #*1111111111111111110010001 25 #x1ffff91)
      (182 #*1111111111111111110010010 25 #x1ffff92)
      (183 #*1111111111111111110010011 25 #x1ffff93)
      (184 #*1111111111111111110010100 25 #x1ffff94)
      (185 #*1111111111111111110010101 25 #x1ffff95)
      (186 #*1111111111111111110010110 25 #x1ffff96)
      (187 #*1111111111111111110010111 25 #x1ffff97)
      (188 #*1111111111111111110011000 25 #x1ffff98)
      (189 #*1111111111111111110011001 25 #x1ffff99)
      (190 #*1111111111111111110011010 25 #x1ffff9a)
      (191 #*1111111111111111110011011 25 #x1ffff9b)
      (192 #*1111111111111111110011100 25 #x1ffff9c)
      (193 #*1111111111111111110011101 25 #x1ffff9d)
      (194 #*1111111111111111110011110 25 #x1ffff9e)
      (195 #*1111111111111111110011111 25 #x1ffff9f)
      (196 #*1111111111111111110100000 25 #x1ffffa0)
      (197 #*1111111111111111110100001 25 #x1ffffa1)
      (198 #*1111111111111111110100010 25 #x1ffffa2)
      (199 #*1111111111111111110100011 25 #x1ffffa3)
      (200 #*1111111111111111110100100 25 #x1ffffa4)
      (201 #*1111111111111111110100101 25 #x1ffffa5)
      (202 #*1111111111111111110100110 25 #x1ffffa6)
      (203 #*1111111111111111110100111 25 #x1ffffa7)
      (204 #*1111111111111111110101000 25 #x1ffffa8)
      (205 #*1111111111111111110101001 25 #x1ffffa9)
      (206 #*1111111111111111110101010 25 #x1ffffaa)
      (207 #*1111111111111111110101011 25 #x1ffffab)
      (208 #*1111111111111111110101100 25 #x1ffffac)
      (209 #*1111111111111111110101101 25 #x1ffffad)
      (210 #*1111111111111111110101110 25 #x1ffffae)
      (211 #*1111111111111111110101111 25 #x1ffffaf)
      (212 #*1111111111111111110110000 25 #x1ffffb0)
      (213 #*1111111111111111110110001 25 #x1ffffb1)
      (214 #*1111111111111111110110010 25 #x1ffffb2)
      (215 #*1111111111111111110110011 25 #x1ffffb3)
      (216 #*1111111111111111110110100 25 #x1ffffb4)
      (217 #*1111111111111111110110101 25 #x1ffffb5)
      (218 #*1111111111111111110110110 25 #x1ffffb6)
      (219 #*1111111111111111110110111 25 #x1ffffb7)
      (220 #*1111111111111111110111000 25 #x1ffffb8)
      (221 #*1111111111111111110111001 25 #x1ffffb9)
      (222 #*1111111111111111110111010 25 #x1ffffba)
      (223 #*1111111111111111110111011 25 #x1ffffbb)
      (224 #*1111111111111111110111100 25 #x1ffffbc)
      (225 #*1111111111111111110111101 25 #x1ffffbd)
      (226 #*1111111111111111110111110 25 #x1ffffbe)
      (227 #*1111111111111111110111111 25 #x1ffffbf)
      (228 #*1111111111111111111000000 25 #x1ffffc0)
      (229 #*1111111111111111111000001 25 #x1ffffc1)
      (230 #*1111111111111111111000010 25 #x1ffffc2)
      (231 #*1111111111111111111000011 25 #x1ffffc3)
      (232 #*1111111111111111111000100 25 #x1ffffc4)
      (233 #*1111111111111111111000101 25 #x1ffffc5)
      (234 #*1111111111111111111000110 25 #x1ffffc6)
      (235 #*1111111111111111111000111 25 #x1ffffc7)
      (236 #*1111111111111111111001000 25 #x1ffffc8)
      (237 #*1111111111111111111001001 25 #x1ffffc9)
      (238 #*1111111111111111111001010 25 #x1ffffca)
      (239 #*1111111111111111111001011 25 #x1ffffcb)
      (240 #*1111111111111111111001100 25 #x1ffffcc)
      (241 #*1111111111111111111001101 25 #x1ffffcd)
      (242 #*1111111111111111111001110 25 #x1ffffce)
      (243 #*1111111111111111111001111 25 #x1ffffcf)
      (244 #*1111111111111111111010000 25 #x1ffffd0)
      (245 #*1111111111111111111010001 25 #x1ffffd1)
      (246 #*1111111111111111111010010 25 #x1ffffd2)
      (247 #*1111111111111111111010011 25 #x1ffffd3)
      (248 #*1111111111111111111010100 25 #x1ffffd4)
      (249 #*1111111111111111111010101 25 #x1ffffd5)
      (250 #*1111111111111111111010110 25 #x1ffffd6)
      (251 #*1111111111111111111010111 25 #x1ffffd7)
      (252 #*1111111111111111111011000 25 #x1ffffd8)
      (253 #*1111111111111111111011001 25 #x1ffffd9)
      (254 #*1111111111111111111011010 25 #x1ffffda)
      (255 #*1111111111111111111011011 25 #x1ffffdb)
      (256 #*1111111111111111111011100 25 #x1ffffdc :eos))))

(define-compiler-macro huff-char-code (entry) `(first  ,entry))
(define-compiler-macro huff-bitv      (entry) `(second ,entry))
(define-compiler-macro huff-nbits     (entry) `(third  ,entry))
(define-compiler-macro huff-value     (entry) `(fourth ,entry))

(defun byte-vector-to-bit-vector (bytes length)
  "Create a vector of type BIT from a vector of type (UNSIGNED-BYTE 8)."
  ; seems like there should be implementation-specific fast ways of doing this...
  (loop
     with data = (make-array (* length 8) :element-type 'bit)
     for c across bytes
     repeat length
     for i from 0 by 8
     do (loop
	   for b downfrom 7 to 0
	   for j upfrom i
	   do (setf (bit data j) (ldb (byte 1 b) c)))
     finally (return data)))

;; this is not a particularly fast implementation

(defun huffman-decode (array input-length)
  "Huffman decode by multiple passes on the huffman table."
  (declare (fixnum input-length))
  (loop
     with bit-input-length = (* input-length 8)
     with bits = (byte-vector-to-bit-vector array input-length)
     with data = (make-array (* input-length 3) :element-type '(unsigned-byte 8) :fill-pointer 0)
     with bp = 0
     while (<= bp bit-input-length)
     for c = (loop
		for n from 4 to 27
		for bpn from (+ bp 4) to (+ bp 27)
		while (<= bpn bit-input-length)
		for d = (find-if (lambda (h)
				   (and (= n (huff-nbits h))
					(not (mismatch (huff-bitv h) bits :start2 bp :end2 bpn))))
				 *huffman-request*)
		if d do (progn
			  (incf bp n)
			  (return (huff-char-code d))))
     if c
     do (vector-push-extend c data)
     else
     do (loop-finish)
     finally (progn
	       ; (format t "(huffman-decode): returning ~S~%" (map 'string #'code-char data))
	       (return (values data (- bit-input-length bp))))))

(defun huffman-decode-buffer-to-string (buffer input-length)
  (babel:octets-to-string (huffman-decode (buffer-data buffer) input-length)))

;; following is code to setup a faster implementation but it makes sbcl crash sometimes

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun huffman-tree (hlist &optional (n 0))
    (macrolet ((huff-filter ((var list) form) `(remove-if-not (lambda (,var) ,form) ,list)))
      (if (> n 27)
	  nil
	  (let ((hlist* (huff-filter (h hlist) (> (huff-nbits h) n))))
	    (if (null hlist*)
		(car hlist)
		(list (huffman-tree (huff-filter (h hlist*) (= (aref (huff-bitv h) n) 0)) (1+ n))
		      (huffman-tree (huff-filter (h hlist*) (= (aref (huff-bitv h) n) 1)) (1+ n))))))))

  (defun tree-to-code (tree)
    (if (integerp (first tree))
	`(yield-byte ,(first tree))
	`(if (next-bit-zero)
	     ,(tree-to-code (first tree))
	     ,(tree-to-code (second tree))))))

(defmacro def-huffman-decode (hlist)
  (let ((hcode (tree-to-code (huffman-tree (eval hlist)))))
    `(defun huffman-decode (array input-length)
       (loop
	  with bit-input-length = (* input-length 8)
	  with bits = (byte-vector-to-bit-vector array input-length)
	  with data = (make-array (* input-length 3) :element-type '(unsigned-byte 8) :fill-pointer 0)
	  with bp = 0
	  with dp = 0
	  while (< bp bit-input-length)
	  do (macrolet ((next-bit-zero () `(prog1 (zerop (aref bits bp)) (incf bp)))
			(yield-byte (c) (if (< c 256) `(progn (setf (aref data dp) ,c) (incf dp)) `(loop-finish))))
	       ,hcode)
	  finally (progn
		    (setf (fill-pointer data) dp)
		    (return (values data (- bit-input-length bp))))))))

; sometimes this causes a stack overflow or some such:
;(def-huffman-decode *huffman-request*)

(defun test-huffman-decode-1 ()
  (let ((input #(90 139 52 33 152 99 204 35 38 97 130 7 212 219 111 226 229 230 23 211
		 106 125 219 114 121 226 250 155 108 210 4 129))
	(input-size 32)
	(output #(101 99 50 45 53 48 45 49 55 45 49 49 56 45 49 52 52 46 99 111 109 112
		  117 116 101 45 49 46 97 109 97 122 111 110 97 119 115 46 99 111 109 58
		  56 48 56 48))
	(output-leftover 1))
    (multiple-value-bind (test-output test-output-leftover)
	(huffman-decode input input-size)
      (and (not (mismatch output test-output)) (= output-leftover test-output-leftover)))))

(defun test-huffman-decode-2 ()
  (let ((input #(214 223 118 89 98 79 11 224 111 235 90 84 203 156 220 107 236 55 133
		 206 93 134 214 149 27 199 105 189 12 32 252 189 134 195 148 200 39 195
		 226 109 75 87 179 78 64 32 2 2 109 44 193 124 27 208 232 39 195))
	(input-size 57)
	(output #(77 111 122 105 108 108 97 47 53 46 48 32 40 77 97 99 105 110 116 111
		  115 104 59 32 73 110 116 101 108 32 77 97 99 32 79 83 32 88 32 49 48
		  46 57 59 32 114 118 58 51 50 46 48 41 32 71 101 99 107 111 47 50 48 49
		  48 48 49 48 49 32 70 105 114 101 102 111 120 47 51 50 46 48))
	(output-leftover 2))
    (multiple-value-bind (test-output test-output-leftover)
	(huffman-decode input input-size)
      (and (not (mismatch output test-output)) (= output-leftover test-output-leftover)))))
